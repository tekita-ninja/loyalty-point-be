// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model OtpCode {
  id           String  @id @default(uuid())
  phone        String
  code         String
  expiresAt    DateTime
  isVerified   Boolean
}

model TempUser {
  id              String  @id @default(uuid())
  phone           String  @unique()
  registerToken   String?
  expiresAt       DateTime?   
}

model User {
  id           String  @id @default(uuid())
  firstname    String  @db.VarChar(100)
  lastname     String  @db.VarChar(100)
  email        String  @unique @db.VarChar(100)
  password     String  @db.VarChar(100)
  phone        String  @unique @db.VarChar(100)
  gender       Gender
  birthDate    DateTime 
  refreshToken String?
  status       Boolean @default(true) // 1: active, 0: inactive
  exprPoints   DateTime?

  transaction  Transaction[] @relation("UserTransaction")
  transactionCreatedBy Transaction[] @relation("CreatedByUser")
  rankingId    String?
  customerPoints CustomerPoint[] @relation("UserCustomerPoint")
  customerPointsCreatedBy CustomerPoint[] @relation("CreatedByUser")
  createdTransactionLogs TransactionLog[] @relation("TransactionLogCreatedBy")
  updatedTransactionLogs TransactionLog[] @relation("TransactionLogUpdatedBy")
  deletedTransactionLogs TransactionLog[] @relation("TransactionLogDeletedBy")

  ranking      Ranking? @relation(fields: [rankingId], references: [id])
  likes        Like[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  
  roles     UserRole[]

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@index([firstname, lastname,  email, phone])
  @@map("users")
}

model Role {
  id   String @id @default(uuid())
  name String @db.VarChar(128)
  code String @db.VarChar(64)

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  users       UserRole[]
  permissions RolePermission[]
  menus       RoleMenu[]

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("master_roles")
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("user_roles")
}

model Permission {
  id     String @id @default(uuid())
  name   String @db.VarChar(128)
  code   String @unique() @db.VarChar(64)
  method String @db.VarChar(64)
  path   String @db.VarChar(128)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  roles RolePermission[]

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("master_permissions")
}

model RolePermission {
  permissionId String
  roleId       String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Menu {
  id        String     @id @default(uuid())
  title     String
  isGroup   Boolean?   @default(false)
  icon      String?
  path      String?
  parentId  String?
  order     Int        @default(1)
  parent    Menu?      @relation("MenuToSubmenu", fields: [parentId], references: [id])
  children  Menu[]     @relation("MenuToSubmenu")
  roles     RoleMenu[] // many-to-many
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("master_menus")
}

model RoleMenu {
  roleId String
  menuId String

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@id([roleId, menuId]) // composite key
  @@map("role_menus")
}

  model Ranking {
    id           String @id @default(uuid())
    name         String @db.VarChar(100)

    minPoints    Int
    minSpendings Int?
    rulePointId String? 
    
    rulePoint   RulePoint? @relation(fields: [rulePointId], references: [id])

    users        User[]  
    benefits     RankingBenefit[]
    promotions   PromotionRanking[]



    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdBy String? 
    updatedBy String?
    deletedBy String?

    @@map("master_ranking")
  }

model RankingBenefit {
  id                String @id @default(uuid())
  rankingId        String
  benefitId        String

  ranking Ranking @relation(fields: [rankingId], references: [id], onDelete: Cascade)
  benefit Benefit @relation(fields: [benefitId], references: [id], onDelete: Cascade)


  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String? 
  updatedBy String?
  deletedBy String?

  @@map("ranking_benefit")
}

model Benefit {
  id                String @id @default(uuid())
  title             String @db.VarChar(100)
  description       String @db.Text

  rankings     RankingBenefit[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String? 
  updatedBy String?
  deletedBy String?

  @@map("master_benefits")

}

model PromotionRanking {
  id                String @id @default(uuid())
  rankingId   String
  promotionId String

  ranking Ranking @relation(fields: [rankingId], references: [id], onDelete: Cascade)
  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String? 
  updatedBy String?
  deletedBy String?

  @@map("promotion_ranking")
}

model Promotion {
  id                String @id @default(uuid())
  title     String @db.VarChar(100)
  subtitle  String @db.VarChar(100)
  urlPicture String @db.VarChar(255)
  description String @db.Text
  startDate DateTime
  endDate   DateTime
  isPush    Int

  rankings PromotionRanking[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String? 
  updatedBy String?
  deletedBy String?

  @@map("master_promotions")
}

model Category {
  id      String @id @default(uuid())
  name    String

  rewards Reward[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("master_categories")
}

model Location {
  id        String @id @default(uuid())
  name      String @db.VarChar(100)
  address   String @db.Text
  latitude  Float
  longitude Float

  Transactions Transaction[]
  rewards   RewardLocation[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("master_locations")

}

model RewardLocation {
  id         String @id @default(uuid())
  rewardId String
  locationId String

  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)


  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  

  createdBy String?
  updatedBy String?
  deletedBy String?
  
  @@map("reward_location")
  @@unique([rewardId, locationId])

}

model Reward {
  id    String @id @default(uuid())
  categoryId  String
  name        String  @db.VarChar(100)
  urlPicture  String  @db.VarChar(100)
  // price       Decimal @db.Decimal(15, 2)
  price       Int

  transactions Transaction[]
  locations  RewardLocation[]
  likes      Like[]

  isLimited Int @default(0) // 0: unlimited, 1: limited
  stocks    Int
  startDate DateTime?
  endDate DateTime?

  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("master_rewards")
}

model Transaction {
  id          String @id @default(uuid())
  rewardId    String
  locationId  String
  userId      String
  note        String @db.VarChar(255)
  status      Int @default(0)
  cutPoint    Int
  expired     DateTime?
  date        DateTime @default(now())
  customerPoint CustomerPoint? @relation("TransactionToCustomerPoint")

  location Location @relation(fields: [locationId], references: [id])
  reward   Reward   @relation(fields: [rewardId], references: [id])
  user           User     @relation("UserTransaction", fields: [userId], references: [id])
  createdByUser  User?    @relation("CreatedByUser", fields: [createdBy], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("transactions" )

}

model RulePoint {
  id          String @id @default(uuid())
  name        String? @db.VarChar(100)
  multiplier  Decimal @db.Decimal(10,6)
  isActive    Int
  startDate   DateTime?
  endDate     DateTime?
  Ranking     Ranking[]

  customerPoints CustomerPoint[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("master_rule_points")
}

model CustomerPoint {
  id          String @id @default(uuid())
  userId      String 
  rulePointId String?
  transactionId  String?  @unique()
  note        String @db.VarChar(255)  
  price       Decimal? @db.Decimal(15,2)
  point       Int
  type        Int // 1: add
  isCancel    Int @default(0) // 0: not canceled, 1: canceled
  isExpired   Int @default(0) // 0: not expired, 1: expired
  cancelNote  String? @db.VarChar(255)

  transactionLogs TransactionLog[] 

  user           User     @relation("UserCustomerPoint", fields: [userId], references: [id])
  createdByUser  User?    @relation("CreatedByUser", fields: [createdBy], references: [id])
  rulePoint  RulePoint? @relation(fields: [rulePointId], references: [id])
  transaction Transaction? @relation("TransactionToCustomerPoint", fields: [transactionId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@map("customer_point")
}

model TransactionLog {
  id          String @id @default(uuid())
  customerPointId  String     
  oldPoints   Int
  newPoints   Int
  pointDifference Int
  action     String @db.VarChar(50) 

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  

  createdBy String?
  updatedBy String?
  deletedBy String?

  customerPoint    CustomerPoint @relation(fields: [customerPointId], references: [id]) // Many TransactionLogs belong to one CustomerPoint
  createdUser            User? @relation("TransactionLogCreatedBy", fields: [createdBy], references: [id]) // Optional relation to User for createdBy
  updatedUser            User? @relation("TransactionLogUpdatedBy", fields: [updatedBy], references: [id]) // Optional relation to User for updatedBy
  deletedUser            User? @relation("TransactionLogDeletedBy",fields: [deletedBy], references: [id]) // Optional relation to User for deletedBy
  

  @@map("transaction_logs")
  
}


model Like {
  id          String @id @default(uuid())
  userId      String
  rewardId    String

  user        User   @relation(fields: [userId], references: [id])
  reward      Reward @relation(fields: [rewardId], references: [id])

  likedAt DateTime   @default(now())
  unlikedAt DateTime? 

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?  

  createdBy String?
  updatedBy String?
  deletedBy String?

  @@unique([userId, rewardId]) // Ensure a user can like a reward only once
  @@map("likes")
}